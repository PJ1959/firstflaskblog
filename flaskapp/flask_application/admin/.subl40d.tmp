from flask import Blueprint,render_template,request,redirect,url_for
from flask.ext.security import roles_required, roles_accepted
from flask_application.controllers import TemplateView
from flask.ext.mongoengine.wtf import model_form
from flask_application.posts.models import Post, Comment



admin = Blueprint('admin', __name__, url_prefix='/admin')


class AdminView(TemplateView):
    blueprint = admin
    route = '/'
    route_name = 'index'
    template_name = 'admin/index.html'
    decorators = [roles_required('admin')]

    def get_context_data(self, *args, **kwargs):
        return {
            'content': 'This is the Admin Page'
        }



class AdminList(TemplateView):
    blueprint = admin
    route = '/admin_view'
    route_name = 'list'
    template_name = 'admin/list.html'
    decorators = [roles_required('admin')]
    cls=Post       

    def get(self):
        posts = self.cls.objects.all()
        return render_template('admin/list.html', posts=posts)

class AdminDetail(TemplateView):
    blueprint = admin  
    route ="/create_new"
    route_name = 'create'
    template_name = 'admin/detail.html'
    decorators = [roles_required ('admin')]

    def get_context(self, slug=None):

        form_cls = model_form(Post, exclude=('created_at', 'comments'))

        if slug:
            post=Post.objects.get_or_404(slug=slug)
            if request.method=="POST":
                form =form_cls(request.form, initial=post._data)
            else:

                form=form_cls(obj=post)
        else:

            post=Post()
            form=form_cls(request.form)

        context ={
               "post" : post,
               "form" : form,
               "create" : slug is None
        }

        return context

    def get(self):

        context=self.get_context()
        return  render_template('admin/detail.html', **context )

    def post(self):
        context =self.get_context()
        form =context.get('form')

        if form.validate():
            post=context.get('post')
            form.populate_obj(post)
            post.save()
            return redirect(url_for('admin.list'))
        return render_template('admin/detail.html', **context)


class AdminEdit(TemplateView):

    blueprint = admin  
    route ="/edit/"
    route_name = 'edit'
    template_name = 'admin/detail.html'
    decorators = [roles_required ('admin')]

    def get_context(self,):

        form_cls = model_form(Post, exclude=('created_at', 'comments'))

        if slug:
            post=Post.objects.get_or_404()
            if request.method=="POST":
                form =form_cls(request.form, initial=post._data)
            else:

                form=form_cls(obj=post)
        else:

            post=Post()
            form=form_cls(request.form)

        context ={
               "post" : post,
               "form" : form,
               "create" : slug is None
        }

        return context

    def get(self):

        context=self.get_context()
        return  render_template('admin/detail.html', **context )

    def post(self):
        context =self.get_context()
        form =context.get('form')

        if form.validate():
            post=context.get('post')
            form.populate_obj(post)
            post.save()
            return redirect(url_for('admin.list'))
        return render_template('admin/detail.html', **context)




    
    

class AdminOrEditorView(TemplateView):
    blueprint = admin
    route = '/admin/editor'
    route_name = 'admin_or_editor'
    template_name = 'admin/index.html'
    decorators = [roles_accepted('admin', 'editor')]

    def get_context_data(self, *args, **kwargs):
        return {
            'content': 'This is the Admin/Editor Page'

        }
        


